Nagios-Config-Intelligent
=========================

This is an experiment to see if I can make nagios understand network topology.

Some thoughts on monitoring:
  nagios servers closest to the object being monitored should do the polling
  the nagios configs should inherently understand network segmentation (service/host dependencies should be automatic)
  remote polling servers should send passive checks to a designated CNAME (nagios.<theirdomain>) unless it resolves to "self"
  
  this means that every nagios server will need to know:
    * the names (and therefore the IPs and subnets) of the other nagios servers 
    * what the graph of the network(s) look like (am I closer to <monitored object> than <other nagios server>?
   
  in order to accomplish this, we need a couple things. (basically the bare-minimum to describe your network)
    * a list of all routers in the infrastructure (you would need this to monitor them anyway, right?)
    * a list of all interfaces, and routes (default and otherwise) on these routers (you'd want these anyway to monitor the bytes in/out & errors, right?)
    * a list of all subnets (networks with masks, or CIDRs, this is the only requirement you may not have already needed.)

  having these lets us create a graph like:

  { 10.100.0.0/24 }<--->[eth0:10.100.0.1/24]=[router_1]=[eth1:192.168.10.0/24]<--->{ 192.168.10.0/24 }
                                                 ||
                                            [eth2:172.16.0.1/24]<--->{ 172.16.0.0/24 }<--->[eth0:172.16.0.254/24]=[router_1]
                                                                                                                     ||
                                                                                  { 192.168.12.0/24 } <---> [eth1:192.168.12.0/24]


   (and so on, then network can get pretty big, so we'll be storing it in a graph)

   Now if an object needs monitored in 10.100.0.0/24, then we'd use the nagios server in 10.100.0.0/24 if available, 
   or either 192.168.10.0/24 or 172.16.0.0/24 (or both or whichever isn't the report server)
   if not, and failing that, use the one in 192.168.12.0/24, and so on, for an arbitrarily large network.

   When a nagios server or servers become overloaded, just add more nagios servers, and they'll adjust.

test
